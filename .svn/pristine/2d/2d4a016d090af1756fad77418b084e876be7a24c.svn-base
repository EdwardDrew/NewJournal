package com.ipbase.fragment;

import java.io.File;
import java.util.List;

import org.kymjs.kjframe.KJBitmap;
import org.kymjs.kjframe.ui.BindView;
import org.kymjs.kjframe.ui.ViewInject;
import org.kymjs.kjframe.utils.FileUtils;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import cn.bmob.v3.BmobQuery;
import cn.bmob.v3.datatype.BmobFile;
import cn.bmob.v3.listener.FindListener;
import cn.bmob.v3.listener.UpdateListener;
import cn.bmob.v3.listener.UploadFileListener;

import com.ipbase.AppApplication;
import com.ipbase.AppConfig;
import com.ipbase.AppContext;
import com.ipbase.R;
import com.ipbase.bean.Icon;
import com.ipbase.bean.User;
import com.ipbase.cropper.CropperActivity;
import com.ipbase.ui.MainActivity;
import com.ipbase.utils.AddImageUtils;
import com.ipbase.utils.BmobUtils;
import com.ipbase.utils.MyImageTools;
import com.ipbase.widget.CircleImage;
import com.ipbase.widget.IconView;

/**
 * 
 * ClassName: PersonFragment
 * 
 * @Description: 个人信息界面
 * @author xinyi
 * @date 2015-10-12
 */
public class PersonFragment extends SimpleBackFragment
{
	private KJBitmap kjb;
	private Icon mIcon;
	private String mFilepath;
	@ BindView( id = R.id.rl_touxiang, click = true )
	private RelativeLayout mRlTouXiang;
	@ BindView( id = R.id.iv_touxiang, click = true )
	private CircleImage mTouXiang;
	@ BindView( id = R.id.ll_icon )
	private LinearLayout mLinearLayout;
	@ BindView( id = R.id.icon_big, click = true )
	private IconView mIconView;

	final static public int REQUEST_CODE_UPDATE_PHOTO = 3;

	@ Override
	protected View inflaterView( LayoutInflater layoutInflater,
			ViewGroup viewGroup, Bundle bundle )
	{
		new BmobUtils( outsideAty );
		return View.inflate( outsideAty, R.layout.fragment_person_center, null );
	}

	@ Override
	protected void initData()
	{
		super.initData();
		kjb = new KJBitmap();
		mIcon = new Icon();
		refreshIcon( AppContext.getInstance().getUser() );
	}

	private void refreshIcon( User currentUser )
	{
		if ( currentUser != null )
		{
			mIcon.setPhone( currentUser.getPhone() );
			mIcon.setPassword( currentUser.getPassword() );

			// 保存用户头像缓存的文件夹
			final String iconFolder = Environment.getExternalStorageDirectory()
					+ AppConfig.touXiangPath;
			// 当前用户的头像图片名称
			final String iconName = currentUser.getPhone() + "_icon.png";
			File file = new File( iconFolder + iconName );
			if ( file.exists() )// 如果缓存图片存在
			{
				mTouXiang.setImageBitmap( BitmapFactory.decodeFile( file
						.getAbsolutePath() ) );
			}
			else
			{
				mTouXiang.setImageBitmap( BitmapFactory.decodeResource(
						getResources(), R.drawable.icon_man_black ) );
			}

			BmobQuery< Icon > bmobQuery = new BmobQuery< Icon >();
			bmobQuery.findObjects( getActivity(), new FindListener< Icon >()
			{
				@ Override
				public void onSuccess( List< Icon > object )
				{
					for ( Icon icon : object )
					{
						if ( iconName.equals( icon.getIcon().getFilename() ) )
						{
							mIcon = icon;
							BmobFile bmobFile = mIcon.getIcon();
							if ( bmobFile != null )
							{
								String url = bmobFile
										.getFileUrl( getActivity() );
								if ( url != null && !url.equals( "" ) )
								{
									kjb.display( mTouXiang, url );
									kjb.saveImage( getActivity(), url,
											iconFolder + iconName );
								}
							}
							break;
						}
					}
				}

				@ Override
				public void onError( int code, String msg )
				{
				}
			} );
		}
	}

	@ Override
	protected void widgetClick( View v )
	{
		switch ( v.getId() )
		{
			case R.id.rl_touxiang :
				AddImageUtils.start( outsideAty, this );
				break;
			case R.id.iv_touxiang :
				final String iconName = mIcon.getPhone() + "_icon.png";
				File file = new File( Environment.getExternalStorageDirectory()
						+ AppConfig.touXiangPath + iconName );
				if ( file.exists() )// 如果缓存图片存在
				{
					mIconView.setImageBitmap( BitmapFactory.decodeFile( file
							.getAbsolutePath() ) );
				}
				else
				{
					mIconView.setImageBitmap( BitmapFactory.decodeResource(
							getResources(), R.drawable.icon_man_white ) );
				}
				mIconView.setVisibility( View.VISIBLE );
				mLinearLayout.setVisibility( View.VISIBLE );
				break;

			default :
				break;
		}
	}

	@ Override
	public void onActivityResult( int requestCode, int resultCode, Intent data )
	{
		super.onActivityResult( requestCode, resultCode, data );
		if ( resultCode == Activity.RESULT_OK )
		{
			switch ( requestCode )
			{
				case AddImageUtils.REQUEST_CODE_ALBUM :
					loadAlbum( data );
					break;
				case AddImageUtils.REQUEST_CODE_CAIJIANZHAOPIAN :
					cutThePhoto();
					break;
				case REQUEST_CODE_UPDATE_PHOTO :
					updatePhoto( data );
					break;
			}
		}
	}

	private void loadAlbum( Intent data )
	{
		Uri uri = data.getData();
		String tmppath = null;
		if ( uri != null )
		{
			String path = uri.getPath();
			if ( path.startsWith( "/storage" ) )
			{
				tmppath = path;
			}
			else
			{
				tmppath = FileUtils.uri2File( outsideAty, uri )
						.getAbsolutePath();
			}
			Intent intent = new Intent( outsideAty, CropperActivity.class );
			intent.putExtra( "path", tmppath );
			startActivityForResult( intent, REQUEST_CODE_UPDATE_PHOTO );
		}
	}

	private void cutThePhoto()
	{
		File file = AddImageUtils.getFile();
		if ( file != null && file.exists() )
		{
			Bitmap bitmap = MyImageTools.compressImageFromFile( file.getPath() );
			MyImageTools.saveToSdCard( bitmap, AppConfig.imgCachePath,
					"image.png" );
			Intent intent = new Intent( outsideAty, CropperActivity.class );
			intent.putExtra( "path", file.getPath() );
			startActivityForResult( intent, REQUEST_CODE_UPDATE_PHOTO );
		}
	}

	private void updatePhoto( Intent data )
	{
		mFilepath = data.getStringExtra( "imagePath" );
		kjb.display( mTouXiang, mFilepath );

		Bitmap icon = BitmapFactory.decodeFile( mFilepath );
		String icon_path = MyImageTools.saveToSdCard( icon,
				AppConfig.touXiangPath, mIcon.getPhone() + "_icon.png" );
		File waitForUploadFile = new File( icon_path );

		final BmobFile bmobFile = new BmobFile( waitForUploadFile );
		bmobFile.upload( getActivity(), new UploadFileListener()
		{
			@ Override
			public void onSuccess()
			{
				if ( mIcon.getIcon() == null )
				{
					mIcon.setIcon( bmobFile );
					mIcon.save( getActivity() );
				}
				else
				{
					mIcon.getIcon().delete( getActivity() );
					mIcon.setIcon( bmobFile );
					mIcon.update( getActivity(), mIcon.getObjectId(),
							new UpdateListener()
							{
								@ Override
								public void onSuccess()
								{
								}

								@ Override
								public void onFailure( int arg0, String arg1 )
								{
								}
							} );
				}
				ViewInject.toast( "头像修改成功" );
			}

			@ Override
			public void onFailure( int statuscode, String errormsg )
			{
				ViewInject.toast( "修改头像失败，请稍后再试" );
			}
		} );
	}

	@ Override
	public void onBackClick()
	{
		if ( mIconView != null && mLinearLayout != null )
		{
			if ( mIconView.getVisibility() == View.VISIBLE
					|| mLinearLayout.getVisibility() == View.VISIBLE )
			{
				mIconView.setVisibility( View.GONE );
				mLinearLayout.setVisibility( View.GONE );
			}
			else
			{
				MainActivity activity = AppApplication
						.getInstance().getMainActivity();
				if ( activity != null )
				{
					activity.reFresh();
				}
				super.onBackClick();
			}
		}
	}
};