package com.ipbase.fragment;

import org.json.JSONException;
import org.json.JSONObject;
import org.kymjs.kjframe.KJHttp;
import org.kymjs.kjframe.http.HttpCallBack;
import org.kymjs.kjframe.http.HttpParams;
import org.kymjs.kjframe.ui.BindView;
import org.kymjs.kjframe.ui.ViewInject;
import org.kymjs.kjframe.utils.StringUtils;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import cn.smssdk.SMSSDK;

import com.ipbase.R;
import com.ipbase.utils.CommonUtils;
import com.ipbase.utils.SMSCallBack;
import com.ipbase.utils.SMSUtils;

/**
 * 
 * ClassName: RegisterFragment
 * 
 * @Description: 注册界面
 * @author kesar
 * @date 2015-9-3
 */
public class RegisterFragment extends SimpleBackFragment implements TextWatcher
{
	private String WEB_PATH;

	@ BindView( id = R.id.reg_et_phone )
	private EditText mEtPhone;
	@ BindView( id = R.id.reg_et_verification )
	private EditText mEtVerification;
	@ BindView( id = R.id.reg_btn_verification, click = true )
	private Button mBtnVerification;
	@ BindView( id = R.id.reg_et_password )
	private EditText mEtPassword;
	@ BindView( id = R.id.reg_et_repassword )
	private EditText mEtRePassword;
	@ BindView( id = R.id.reg_btn, click = true )
	private Button mBtnReg;

	private Thread mThreadVerification = null;
	private final int mTime = 60;
	private String phone = null; // 手机号
	private String password = null; // 密码
	private SMSUtils smsUtils = null;

	private KJHttp mKjHttp;

	@ Override
	protected View inflaterView( LayoutInflater layoutInflater,
			ViewGroup viewGroup, Bundle bundle )
	{
		return View.inflate( outsideAty, R.layout.fragment_register, null );
	}

	@ Override
	protected void initData()
	{
		super.initData();
		// 网络连接相关
		WEB_PATH = getString( R.string.url_base )
				+ getString( R.string.url_reg );
		mKjHttp = new KJHttp();
		// 初始化手机验证码工具
		smsUtils = new SMSUtils( outsideAty, mBtnVerification );
		smsUtils.initSMS( new SMSCallBack()
		{
			@ Override
			public void doAfterSubmit()
			{
				doRegister();
			}
		} );
	}

	@ Override
	protected void initWidget( View parentView )
	{
		super.initWidget( parentView );
		// 初始化EditText的监听器
		setTitle( "注册" );
		initTextChangedListener();
	}

	@ Override
	protected void widgetClick( View v )
	{
		super.widgetClick( v );
		switch ( v.getId() )
		{
			case R.id.reg_btn_verification :
			{
				doGetVerification();
				break;
			}
			case R.id.reg_btn :
			{
				if ( checkInput() )
				{
					SMSSDK.submitVerificationCode( "86", phone, mEtVerification
							.getText().toString().trim() ); // 提交短信验证码
				}
				break;
			}

			default :
				break;
		}
	}

	/**
	 * 
	 * @Description: 获取验证码操作
	 * @param
	 * @return void
	 * @throws
	 * @author kesar
	 * @date 2015-9-3
	 */
	private void doGetVerification()
	{
		if ( !CommonUtils.hasNetwork( getActivity() ) )
		{
			ViewInject.toast( "请检查网络连接!" );
			return;
		}
		phone = mEtPhone.getText().toString().trim();
		if ( StringUtils.isEmpty( phone ) )
		{
			ViewInject.toast( "手机号不能为空" );
			return;
		}
		if ( !CommonUtils.isMobileNO( phone ) )
		{
			ViewInject.toast( "手机格式不正确" );
			return;
		}
		SMSSDK.getVerificationCode( "86", phone );
		mThreadVerification = new Thread( mRunnable );
		mThreadVerification.start();
	}

	@ SuppressLint( "HandlerLeak" )
	/**
	 * 获取验证码的线程
	 */
	private Runnable mRunnable = new Runnable()
	{
		private int time = mTime;

		@ Override
		public void run()
		{
			try
			{
				while ( time != 0 )
				{
					Message message = new Message();
					message.obj = time;
					message.what = SMSUtils.Msg_Thread_Runing;
					smsUtils.getHandler().sendMessage( message );
					Thread.sleep( 1000 );
					time--;
				}
				time = mTime;
				smsUtils.getHandler().sendEmptyMessage(
						SMSUtils.Msg_Thread_Stop );
			}
			catch ( Exception e )
			{
			}
		}
	};

	/**
	 * 
	 * @Description: 注册操作
	 * @param
	 * @return void
	 * @throws
	 * @author kesar
	 * @date 2015-9-3
	 */
	private void doRegister()
	{
		HttpParams params = new HttpParams();
		params.put( "phone", phone );
		params.put( "password", password );
		mKjHttp.post( WEB_PATH, params, new HttpCallBack()
		{
			@ Override
			public void onSuccess( String t )
			{
				super.onSuccess( t );
				ViewInject.toast( t );
				try
				{
					JSONObject object = new JSONObject( t );
					boolean success = object.getBoolean( "result" );
					String msg = object.getString( "msg" );
					ViewInject.toast( msg );
					if ( success )
					{
						onBackClick();
					}
				}
				catch ( JSONException e )
				{
					e.printStackTrace();
				}
			}

			@ Override
			public void onFailure( int errorNo, String strMsg )
			{
				super.onFailure( errorNo, strMsg );
				ViewInject.toast( "错误码:" + errorNo + ", 错误信息:" + strMsg );
				System.out.println( "错误码:" + errorNo + ", 错误信息:" + strMsg );
			}
		} );
	}

	/**
	 * 
	 * @Description: 检查输入
	 * @param @return
	 * @return boolean
	 * @throws
	 * @author kesar
	 * @date 2015-9-3
	 */
	private boolean checkInput()
	{
		if ( !CommonUtils.hasNetwork( getActivity() ) )
		{
			ViewInject.toast( "请检查网络连接!" );
			return false;
		}
		phone = mEtPhone.getText().toString().trim();
		String verification = mEtVerification.getText().toString().trim();
		password = mEtPassword.getText().toString().trim();
		String rePassword = mEtRePassword.getText().toString().trim();
		if ( StringUtils.isEmpty( phone ) )
		{
			ViewInject.toast( "手机号不能为空" );
			return false;
		}
		if ( StringUtils.isEmpty( verification ) )
		{
			ViewInject.toast( "验证码不能为空" );
			return false;
		}
		if ( StringUtils.isEmpty( password ) )
		{
			ViewInject.toast( "密码不能为空" );
			return false;
		}
		if ( StringUtils.isEmpty( rePassword ) )
		{
			ViewInject.toast( "确认能为空" );
			return false;
		}
		if ( !password.equals( rePassword ) )
		{
			ViewInject.toast( "两次输入的密码不一致" );
			return false;
		}
		if ( !CommonUtils.isMobileNO( phone ) )
		{
			ViewInject.toast( "手机格式不正确" );
			return false;
		}
		return true;
	}

	/**
	 * 
	 * @Description: 初始化EditText的监听器
	 * @param
	 * @return void
	 * @throws
	 * @author kesar
	 * @date 2015-9-3
	 */
	private void initTextChangedListener()
	{
		mEtPhone.addTextChangedListener( this );
		mEtVerification.addTextChangedListener( this );
		mEtPassword.addTextChangedListener( this );
		mEtRePassword.addTextChangedListener( this );
	}

	@ Override
	public void onBackClick()
	{
		stopThread();
		outsideAty.changeFragment( new LoginFragment() );
	}

	/**
	 * 
	 * @Description: 停止线程
	 * @param
	 * @return void
	 * @throws
	 * @author kesar
	 * @date 2015-9-3
	 */
	private void stopThread()
	{
		if ( mThreadVerification != null && mThreadVerification.isAlive() )
		{
			mThreadVerification.interrupt();
			mThreadVerification = null;
		}

	}

	@ Override
	public void beforeTextChanged( CharSequence s, int start, int count,
			int after )
	{
	}

	@ Override
	public void onTextChanged( CharSequence s, int start, int before, int count )
	{
	}

	@ Override
	public void afterTextChanged( Editable s )
	{
		phone = mEtPhone.getText().toString().trim();
		String verification = mEtVerification.getText().toString().trim();
		password = mEtPassword.getText().toString().trim();
		String rePassword = mEtRePassword.getText().toString().trim();
		if ( StringUtils.isEmpty( phone ) || StringUtils.isEmpty( verification )
				|| StringUtils.isEmpty( password )
				|| StringUtils.isEmpty( rePassword ) )
		{
			mBtnReg.setEnabled( false );
		}
		else
		{
			mBtnReg.setEnabled( true );
		}

	}

	@ Override
	public void onDestroy()
	{
		// 销毁回调监听接口
		SMSSDK.unregisterAllEventHandler();
		stopThread();
		super.onDestroy();
	}

}
